#!/bin/sh

# Sync mail and give notification about new mail.
pgrep -u "${USER:=$LOGNAME}" > /dev/null || { echo "$USER not logged in; sync will not run."; exit;}

# Set config directory
config_dir="$HOME/.config/isync/mbsyncrc"

# Export environment variables for XDG Directory support
export XDG_CONFIG_HOME="$HOME"/.config
export XDG_CACHE_HOME="$HOME"/.cache
export XDG_DATA_HOME="$HOME"/.local/share
export MACHINE_STORAGE_PATH="$XDG_DATA_HOME"/docker-machine
export DOCKER_CONFIG="$XDG_CONFIG_HOME"/docker
export GNUPGHOME="$XDG_DATA_HOME"/gnupg
export GRADLE_USER_HOME="$XDG_DATA_HOME"/gradle
export GTK2_RC_FILES="$XDG_CONFIG_HOME"/gtk-2.0/gtkrc
export _JAVA_OPTIONS=-Djava.util.prefs.userRoot="$XDG_CONFIG_HOME"/java
export LESSKEY="$XDG_CONFIG_HOME"/less/lesskey
export LESSHISTFILE="$XDG_CACHE_HOME"/less/hisory
export XCOMPOSEFILE="$XDG_CONFIG_HOME"/X11/xcompose
export XCOMPOSECACHE="$XDG_CACHE_HOME"/X11/xcompose
export NODE_REPL_HISTORY="$XDG_DATA_HOME"/node_repl_history
export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/npmrc
export PASSWORD_STORE_DIR="$XDG_DATA_HOME"/pass
export INPUTRC="$XDG_CONFIG_HOME"/readline/inputrc
export GEM_HOME="$XDG_DATA_HOME"/gem
export GEM_SPEC_CACHE="$XDG_CACHE_HOME"/gem
export TMUX_TMPDIR="$XDG_RUNTIME_DIR"
export VAGRANT_HOME="$XDG_DATA_HOME"/vagrant
export VAGRANT_ALIAS_FILE="$XDG_DATA_HOME"/vagrant/aliases
export WGETRC="$XDG_CONFIG_HOME/wgetrc"
export XAUTHORITY="$XDG_RUNTIME_DIR"/Xauthority
export XINITRC="$XDG_CONFIG_HOME/X11/xinitrc"
export ZDOTDIR=$HOME/.config/zsh
export HISTFILE="$XDG_DATA_HOME"/zsh/history
export EDITOR="nvim"
export TERMINAL="st"
export BROWSER="brave"
export BAR="dwmblocks"
# Run only if not already running any instance.
pgrep -x mbsync -c "$config_dir" > /dev/null && { echo "mbsync is already running." ;exit ;}

ping -q -c 1 1.1.1.1 > /dev/null || { echo "No internet connection detected."; exit ;}
command -v notify-send >/dev/null || echo "Note that \`libnotify\` or \`libnotify-send\` should be installed for pop-up mail notifications with this script."

# Requires to display notification if run as cronjob.
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus
export DISPLAY=:0.0
STATUSBAR="dwmblocks"

# Settings are different for MacOS (Darwin) systems.
if [ "$(uname)" = "Darwin" ]; then
    notify() { osascript -e "display notification \"$2 in $1\" with title \"You've got Mail\" subtitle \"Account: $account\"" && sleep 2 ;}
else
    notify() { notify-send --app-name="mutt-wizard" "mutt-wizard" "ðŸ“¬ $2 new mail(s) in \`$1\` account." ;}
fi

#Check account for new mail. Notify if there is new content
syncandnotify() {
	acc="$(echo "$account" | sed "s/.*\///")"
	mbsync -c "$config_dir" "$acc"
	new=$(find "$HOME/.local/share/mail/$acc/INBOX/new/" "$HOME/.local/share/mail/$acc/Inbox/new/" "$HOME/.local/share/mail/$acc/inbox/new/" -type f -newer "$HOME/.config/mutt/.mailsynclastrun" 2> /dev/null)
	newcount=$(echo "$new" | sed '/^\s*$/d' | wc -l)
	if [ "$newcount" -gt "0" ]; then
		notify-send "$acc" "$newcount" &&
		for file in $new; do
			# Extract subject and sender from mail.
			from=$(awk '/^From: / && ++n ==1,/^\<.*\>:/' "$file" | perl -CS -MEncode -ne 'print decode("MIME-Header", $_)' | awk '{ $1=""; if (NF>=3)$NF=""; print $0 }' | sed 's/^[[:blank:]]*[\"'\''\<]*//;s/[\"'\''\>]*[[:blank:]]*$//')
			subject=$(awk '/^Subject: / && ++n == 1,/^\<.*\>: / && ++i == 2' "$file" | head -n-1 | perl -CS -MEncode -ne 'print decode("MIME-Header", $_)' | sed 's/^Subject: //' | sed 's/^{[[:blank:]]*[\"'\''\<]*//;s/[\"'\''\>]*[[:blank:]]*$//' | tr -d '\n')
			notify-send --app-name="mutt-wizard" "ðŸ“¬ $from:" "$subject" &
		done
	fi
}

# Sync accounts passed as argument or all
if [ "$#" -eq "0" ]; then
	accounts="$(awk '/^Channel/ {print $2}' "$config_dir")"
	accounts="$(echo "$accounts" | uniq )"
else
	accounts=$*
	accounts="$(echo "$accounts" | uniq )"
fi

echo " ðŸ”ƒ " > /tmp/imapsyncicon_"$USER"
( pkill -RTMIN+13 "${STATUSBAR:?}" >/dev/null 2>&1 ) 2>/dev/null

# Parallelize multiple accounts
for account in $accounts
do
	syncandnotify &
done

wait
rm -f /tmp/imapsyncicon_"$USER"
( pkill -RTMIN+13 "${STATUSBAR:?}" >/dev/null 2>&1 ) 2>/dev/null

# Index the mail
notmuch new 2>/dev/null

#Create a touch file that indicates the time of the last run of mailsync
touch "$HOME/.config/mutt/.mailsynclastrun"
